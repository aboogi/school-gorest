// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type MaterialType string

const (
	MaterialTypeArticle      MaterialType = "article"
	MaterialTypeVideo        MaterialType = "video"
	MaterialTypePresentation MaterialType = "presentation"
)

func (e *MaterialType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MaterialType(s)
	case string:
		*e = MaterialType(s)
	default:
		return fmt.Errorf("unsupported scan type for MaterialType: %T", src)
	}
	return nil
}

type NullMaterialType struct {
	MaterialType MaterialType
	Valid        bool // Valid is true if MaterialType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMaterialType) Scan(value interface{}) error {
	if value == nil {
		ns.MaterialType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MaterialType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMaterialType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MaterialType), nil
}

type SchoolMaterial struct {
	MaterialID   uuid.UUID
	Name         string
	Content      []byte
	MaterialType MaterialType
	Status       bool
	CreatedAt    time.Time
	UpdatedAt    sql.NullTime
}
