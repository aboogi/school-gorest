// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXzW7cNhd9lcH9viVnJMdJgWiXNHFtFHULN0baBgODkTgzdCVRJin/dCAgdoBuuuim",
	"q+7abrqcGjU88O8rXL1RQWp+LA89thMYKLowPCKJcw/PPfeS7EMokkykLNUKgj5ItpUzpZ+LiDM7sMp2",
	"vg57QsRfUM0kp7EZDEWqWarNT5plMQ+p5iL1NpVIzZgKeyyh5tf/JetAAP/zplG8alZ5ddiv6F4saARF",
	"URCImAolzwwoBPCpZFSzhrLrG8mYR0FgPYuoZv9WfgUByVQmUlVJWQd8JiXdWxvNf/n5A9G2UVykjXz1",
	"pQ/O5SYa6+srLz4weCZFxqQeeTXPeWT+d4RMqIagGiCg9zIGASgtedq1eRmNiLebLNRuXgUZxXHkbjb0",
	"FcZ1IPwdj/Ck3C8P8AIP8QKPGniBlzgs93GA5zg0A2c4KA/wqHyHQxzgKQ5mSRMIrc2iDeqK8otFGDTK",
	"fbzAY/y7wi5/BjJVw9RKU/OEudDvpByBsbs3qpn56R8vfmXWFgRSmjAH91/Ld5b9SaXOOQ7wGA/vqY7S",
	"VOfKgf6b0aU8KN+X+w28LN/jX3iKQzzBQfkjDnEIBFiaJxC8ASrDHt828tBQmx9tR6Dc9pxb0oBDPMYz",
	"PMJz+3f3RNiesZVzySLDyCahrvlkqyM9ycR7NYvUiLZnHE9c3WjW1uPQ9oNrlqj7lvwkMrURCOw2u6Jp",
	"xprqe541hdWOxs1M8FQzCYGWObuuw5TH7VsZd+p5Nfowvp5jyntY7Iat35Z9lzA1oq7WNMRLd31N+Woe",
	"xibONo+YAAKZZIql2nZkF/uCANvVTKY0fiHCqi/LGALoaZ2pwPMiEapWV4huzFqhSMx3nrBUe5G3sPyo",
	"u/lJrJe++2axu/x0M8lX/OjZzqtvVzvLmzvJ67Ul5a8sbiSvnz156bGI203ytCOs+lzHhgn+gZemo+Ah",
	"nlbV52wieIbDBv5pu85p+ZPZIZOqUsZv+a0Fgy0yltKMQwCLLb/1yGyf6p7dlFed916tRLrM2su4zgq0",
	"EkEAnzHtKjaDJWnCNJMKgjd94Cb0Vs7k3ji7wWz273Tu1g1aEDd2R4pko9Yypuh361VuXC0eAjWj3boA",
	"CU95Yly6MMEwHaTL5HyQDcV/uIZEdyukRZ/Mh21fu9I98v2bcjFZ582/9xUEHlco9ep8TqO16jJuljxx",
	"LVlJqzp7KaWQ1b2Gdo2XYOIAaBcEMqEctqyurdf6NbnyAti7eWtXHgne7AuhmFFp4XaVrt0CH1yWgsyW",
	"sNef1BuPirsXNHy8Le699cf+49klq0IviTyNPt4yjtZkWp+jM9k7yvTEMse3s+ZvuIy3CWS5Q2Tn2+4D",
	"7OnEKf5jCbOvFSa3x/mqTtx+JoUWoYiLwPP6PaG0ktuFRzPubS+YA49KTt/GlQSj6YpBh+axyVksQhqb",
	"meCp7/uG5Biyvs6c7VduDaNPe+Jbdu3inwAAAP//KJHurWkQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
